#!/bin/sh

function checkreturn {
	 "$@"
	 local status=$?
	 if [ $status -ne 0 ]; then
	    echo "error with status $1" >&2
	    #sethv --powerdown
	    wait
	    exit 1
	 fi
	 return $status
}

function clear_monitor {
    for line in {1..13}; do
	echo -en "\033[1A\033[K"
    done
}

if [ -f runGPM.log ]; then rm -f runGPM.log; fi
if [ -f waveform.log ]; then rm -f waveform.log; fi
if [ -f bad.list ]; then rm -f bad.list; fi

CONFIG_FILE=/home/argonshef/CAENHV/config.conf

checkreturn cd /home/argonshef/AgMD2_GPM/ 
checkreturn make clean
checkreturn make
checkreturn cd /home/argonshef/ProcessGPM/
checkreturn make clean
checkreturn make
checkreturn cd /home/argonshef/CAENHV/
checkreturn make clean
checkreturn make
checkreturn cd /home/argonshef/gpm_work/

arr_cnt=0

VCT_VALUES="$@"

for Vct in $VCT_VALUES
do
    Vtopstrip=`expr 640`
    Vcathode=`expr $Vtopstrip + $Vct`
    Vanode=`expr $Vcathode + 125`
    Vplane=`expr $Vcathode`

    cat > $CONFIG_FILE <<EOF
# {P or N} {ch. num.} {VSET} {ISET} {PW} {TRIP_TIME} {SVMAX} {RAMP_DOWN} {RAMP_UP} {PWDOWN} {IMON_RANGE}

N 0 685  0.500 1 10 3000 50 5 1 0
N 1 685  0.500 1 10 3000 50 5 1 0
N 2 90   0.500 1 10 3000 50 5 1 0
N 3 0    0.500 1 10 3000 50 5 1 0
N 4 0    0.500 0 10 3000 50 5 1 0
N 5 0    0.500 0 10 3000 50 5 1 0
P 0 550  0.500 1 10 3000 50 5 1 0
P 1 0    0.500 0 0  10   50 5 0 0
P 2 ${Vtopstrip}  0.500 1 10 3000 50 5 1 0
P 3 ${Vcathode} 0.500 1 10 3000 50 5 1 0
P 4 ${Vanode} 0.500 1 10 3000 50 5 1 0
P 5 ${Vplane} 0.500 1 10 3000 50 5 1 0
EOF

    
    checkreturn sethv --setconfig $CONFIG_FILE &
    wait $!
    checkreturn sethv --getconfig $CONFIG_FILE
#    echo -n "Is this config okay? [Y/n] "
#    read -n 1 answer
#    if [ -n "$answer" ]; then
#	if [ "$answer" != "y" ] || [ "$answer" != "Y" ]; then
#	    echo -e "\nFix the problem and start again..."
#	    exit 1
#	fi
#    fi 

    checkreturn sethv --powerup $CONFIG_FILE &
    wait $!
    sleep 5
    sethv --monitor
    RETURN=$?
    echo ""
    while [ $RETURN -ne 0 ]; do
	sleep 5
	clear_monitor
	sethv --monitor
	let RETURN=$?
	echo "Ramping up voltages"
    done
    echo -e "\033[1A\033[K Doing it"
    sleep 15

    /home/argonshef/AgMD2_GPM/runGPM >>runGPM.log 2>&1 &
    RUN_PID=$!
    clear_monitor
    sethv --monitor
    RETURN=$?
    echo "Taking data..."
    while [ $RETURN -eq 0 ]; do
	sleep 1
	clear_monitor
	sethv --monitor
	let RETURN=$?
	badvoltage=$RETURN
	if [ $badvoltage -eq 1 ]; then
	    echo "$Vct" >> bad.list
	    break
	fi
	echo "$(tail -n 1 runGPM.log)"
	ps $RUN_PID &> /dev/null
	STILL_RUNNING=$?
	if [ $STILL_RUNNING -eq 1 ]; then
	    break
	fi
    done
    
    wait $RUN_PID

    DATA_FILE=$(ls -t GPM*.dat | head -n1)
    NEW_DATA_FILE=$(basename $DATA_FILE .dat)_${Vct}VCT.dat
    mv $DATA_FILE $NEW_DATA_FILE
    if [ ! -f $(basename $NEW_DATA_FILE .dat) ]; then
	/home/argonshef/ProcessGPM/waveform $NEW_DATA_FILE >>waveform.log 2>&1 &
	ana_pids[$arr_cnt]=$!
	dat_file[$arr_cnt]=$NEW_DATA_FILE
    fi
    wait ${ana_pids[$arr_cnt]}

#    echo "ana_pids[@]"${ana_pids[@]}

    for (( it=0; it<=$arr_cnt; it++ )); do
	ps ${ana_pids[$it]} &> /dev/null
	STILL_RUNNING=$?
	#echo "still_running="$STILL_RUNNING
	if [ $STILL_RUNNING -eq 1 ]; then
	    rm -f ${dat_file[$it]}
	fi
    done

    ((arr_cnt++))

done

wait 

for (( it=0; it<$arr_cnt; it++ )); do
    ps ${ana_pids[$it]} &> /dev/null
    STILL_RUNNING=$?
    #echo "still_running="$STILL_RUNNING
    if [ $STILL_RUNNING -eq 1 ]; then
        rm -f ${dat_file[$it]}
    fi
done

if [[ -s bad.list ]]; then
    while read Vct; do
	REDO_VOLTAGES="${Vct} ${REDO_VOLTAGES}"
    done <bad.list
    bash do_run $REDO_VOLTAGES
fi

exit 0


